// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  authId    String   @unique // From Auth0
  email     String   @unique
  firstName String
  lastName  String
  role      Role     @default(CANDIDATE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recruiterProfile RecruiterProfile?
  candidateProfile CandidateProfile?
  applications     Application[]
  Job              Job[]
}

model Company {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  website     String?
  logoUrl     String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  recruiters  RecruiterProfile[]
  jobs        Job[]
}

model RecruiterProfile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  position  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @db.ObjectId

  jobsPosted Job[]
}

model Job {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  location    String
  jobType     JobType   @default(FULL_TIME)
  status      JobStatus @default(DRAFT)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  postedBy   User   @relation(fields: [postedById], references: [id])
  postedById String @db.ObjectId

  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @db.ObjectId

  applications       Application[]
  RecruiterProfile   RecruiterProfile? @relation(fields: [recruiterProfileId], references: [id])
  recruiterProfileId String?           @db.ObjectId
}

model CandidateProfile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  headline  String?
  resumeUrl String?
  skills    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
}

model Application {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  status      ApplicationStatus @default(SUBMITTED)
  appliedAt   DateTime          @default(now())
  coverLetter String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String @db.ObjectId

  candidate   User   @relation(fields: [candidateId], references: [id])
  candidateId String @db.ObjectId
}

enum Role {
  RECRUITER
  CANDIDATE
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum JobStatus {
  DRAFT
  OPEN
  CLOSED
}

enum ApplicationStatus {
  SUBMITTED
  REVIEWED
  INTERVIEWING
  OFFERED
  REJECTED
}
